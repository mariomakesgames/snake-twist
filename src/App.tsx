import { useEffect, useRef, useState } from 'react';
import { IRefPhaserGame, PhaserGame } from './PhaserGame';
import { GameInstructions } from './components/GameInstructions';
import { EventBus } from './game/EventBus';

function App()
{
    //  References to the PhaserGame component (game and scene are exposed)
    const phaserRef = useRef<IRefPhaserGame | null>(null);
    const [score, setScore] = useState(0);
    const [highScore, setHighScore] = useState(0);

    // Event emitted from the PhaserGame component
    const currentScene = (scene: Phaser.Scene) => {
        console.log('Scene ready:', scene.scene.key);
        // Scene change handler - can be used for future functionality
    }

    useEffect(() => {
        const onGameOver = (finalScore: number) => {
            setScore(finalScore);
            if (finalScore > highScore) setHighScore(finalScore);
        };
        EventBus.on('game-over', onGameOver);
        return () => {
            EventBus.removeListener('game-over', onGameOver);
        };
    }, [highScore]);

    // ÁõëÂê¨È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñÔºåÂÆûÁé∞Ëá™Âä®ÊöÇÂÅúÂäüËÉΩ
    useEffect(() => {
        const handleVisibilityChange = () => {
            const gameState = (window as any).gameState;
            if (!gameState) return;

            const currentScene = phaserRef.current?.scene;
            if (!currentScene || currentScene.scene.key !== 'SnakeScene') return;

            const snakeScene = currentScene as any;

            if (document.hidden) {
                // È°µÈù¢ÈöêËóèÊó∂Ëá™Âä®ÊöÇÂÅúÊ∏∏Êàè
                if (!gameState.isPaused && !gameState.isGameOver && snakeScene.isGameActive()) {
                    console.log('È°µÈù¢ÈöêËóèÔºåËá™Âä®ÊöÇÂÅúÊ∏∏Êàè');
                    snakeScene.setPauseState(true);
                }
            }
            // Ê≥®ÊÑèÔºöÈ°µÈù¢ÈáçÊñ∞ÂèØËßÅÊó∂‰∏çËá™Âä®ÊÅ¢Â§çÔºåÈúÄË¶ÅÁî®Êà∑ÊâãÂä®ÁÇπÂáªÊÅ¢Â§ç
        };

        // Ê∑ªÂä†È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñÁõëÂê¨
        document.addEventListener('visibilitychange', handleVisibilityChange);
        
        // Ê∑ªÂä†È°µÈù¢ÁÑ¶ÁÇπÂèòÂåñÁõëÂê¨Ôºà‰Ωú‰∏∫Â§áÁî®Ôºâ
        window.addEventListener('blur', () => {
            const gameState = (window as any).gameState;
            if (!gameState) return;
            
            const currentScene = phaserRef.current?.scene;
            if (!currentScene || currentScene.scene.key !== 'SnakeScene') return;

            const snakeScene = currentScene as any;
            
            if (!gameState.isPaused && !gameState.isGameOver && snakeScene.isGameActive()) {
                console.log('È°µÈù¢Â§±ÂéªÁÑ¶ÁÇπÔºåËá™Âä®ÊöÇÂÅúÊ∏∏Êàè');
                snakeScene.setPauseState(true);
            }
        });

        // ÁßªÈô§focus‰∫ã‰ª∂ÁõëÂê¨Ôºå‰∏çËá™Âä®ÊÅ¢Â§çÊ∏∏Êàè
        // window.addEventListener('focus', () => { ... });

        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
            window.removeEventListener('blur', handleVisibilityChange);
        };
    }, []);

    return (
        <div className="game-container">
            <div className="header-row">
                <h1>üêç Snake Game</h1>
                <div className="score-display">
                    <div className="score-item">
                        Score: <span id="score">{score}</span>
                    </div>
                    <div className="score-item">
                        High Score: <span id="highScore">{highScore}</span>
                    </div>
                </div>
            </div>

            <PhaserGame ref={phaserRef} currentActiveScene={currentScene} />

            <GameInstructions />
        </div>
    )
}

export default App;
